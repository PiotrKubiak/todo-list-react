{"version":3,"sources":["features/tasks/TasksPage/Form/styled.js","features/tasks/tasksLocalStorage.js","features/tasks/tasksSlice.js","features/tasks/TasksPage/Form/index.js","features/tasks/TasksPage/TasksList/styled.js","routes.js","features/tasks/searchQueryParamName.js","features/tasks/TasksPage/TasksList/index.js","features/tasks/TasksPage/Buttons/styled.js","features/tasks/TasksPage/Buttons/index.js","common/Section/styled.js","common/Section/index.js","common/Header/index.js","common/Container/styled.js","common/Container/index.js","features/tasks/TasksPage/FetchExampleTasksButton/index.js","features/tasks/Input/index.js","features/tasks/TasksPage/Search/styled.js","features/tasks/TasksPage/Search/index.js","features/tasks/queryParameters.js","features/tasks/TasksPage/index.js","features/tasks/TaskPage/styled.js","features/tasks/TaskPage/index.js","features/author/styled.js","features/author/Author.js","Navigation/styled.js","Navigation/index.js","App.js","reportWebVitals.js","GlobalStyle.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","rootSaga.js","store.js","index.js","theme.js"],"names":["StyledForm","styled","form","theme","breakpoint","mobileMax","Input","input","color","alto","Button","button","teal","white","localStorageKey","saveTasksInLocalStorage","tasks","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","parse","getItem","loading","hideDone","reducers","addTask","task","payload","push","toggleHideDone","state","toggleTaskDone","taskId","index","findIndex","id","done","removeTask","splice","setAllDone","fetchExampleTasks","fetchExampleTasksSuccess","fetchExampleTasksError","actions","selectTasksState","selectTasks","selectHideDone","selectLoading","selectAreTasksEmpty","length","selectIsEveryTaskDone","every","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","trimmedNewTaskContent","trim","content","nanoid","current","focus","value","placeholder","onChange","target","ref","List","ul","Item","li","hidden","css","Content","span","toggleDone","forestgreen","remove","crimson","StyledLink","NavLink","toTask","searchQueryParamName","TaskList","location","useLocation","query","URLSearchParams","search","get","useSelector","filter","toUpperCase","includes","selectTasksByQuery","map","onClick","to","Wrapper","div","silver","Buttons","areTasksEmpty","isEveryTaskDone","disabled","section","Header","header","Title","h2","Body","Section","title","body","extraHeaderContent","Container","children","ExampleTaskButton","Search","key","useQueryParameter","replaceQueryParameter","history","useHistory","searchParams","undefined","delete","set","newSearch","toString","pathname","useReplaceQueryParameter","TasksPage","TasksList","TaskPage","useParams","find","getTaskById","Article","article","Author","activeClassName","StyledNavLink","attrs","Navigation","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyle","createGlobalStyle","gallery","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","saveTasksInLocalStorageHandler","tasksSaga","delay","call","exampleTasks","put","alert","select","takeLatest","type","takeEvery","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","run","ReactDOM","render","StrictMode","black","document","getElementById"],"mappings":"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","file":"static/js/main.30fe3833.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n  display: grid;\r\n  grid-template-columns: 1fr auto;\r\n  grid-gap: 20px;\r\n\r\n  @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n    grid-template-columns: 1fr;\r\n  }\r\n`;\r\n\r\nexport const Input = styled.input`\r\n  padding: 10px;\r\n  border: 1px solid ${({ theme }) => theme.color.alto};\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  padding: 10px;\r\n  background: ${({ theme }) => theme.color.teal};\r\n  color: ${({ theme }) => theme.color.white};\r\n  border: none;\r\n  transition: 0.5s;\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    filter: brightness(110%);\r\n    transform: scale(1.2);\r\n  }\r\n\r\n  &:active {\r\n    filter: brightness(120%);\r\n    transform: scale(1.2);\r\n  }\r\n`;\r\n","const localStorageKey = \"tasks\";\r\n\r\nexport const saveTasksInLocalStorage = (tasks) =>\r\n  localStorage.setItem(localStorageKey, JSON.stringify(tasks));\r\n\r\nexport const getTasksFromLocalStorage = () =>\r\n  JSON.parse(localStorage.getItem(localStorageKey)) || [];\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { getTasksFromLocalStorage } from \"./tasksLocalStorage\";\r\n\r\nconst tasksSlice = createSlice({\r\n  name: \"tasks\",\r\n  initialState: {\r\n    tasks: getTasksFromLocalStorage(),\r\n    loading: false,\r\n    hideDone: false,\r\n  },\r\n  reducers: {\r\n    addTask: ({ tasks }, { payload: task }) => {\r\n      tasks.push(task);\r\n    },\r\n    toggleHideDone: (state) => {\r\n      state.hideDone = !state.hideDone;\r\n    },\r\n    toggleTaskDone: ({ tasks }, { payload: taskId }) => {\r\n      const index = tasks.findIndex(({ id }) => id === taskId);\r\n      tasks[index].done = !tasks[index].done;\r\n    },\r\n    removeTask: ({ tasks }, { payload: taskId }) => {\r\n      const index = tasks.findIndex(({ id }) => id === taskId);\r\n      tasks.splice(index, 1);\r\n    },\r\n    setAllDone: ({ tasks }) => {\r\n      for (const task of tasks) {\r\n        task.done = true;\r\n      }\r\n    },\r\n    fetchExampleTasks: (state) => {\r\n      state.loading = true;\r\n    },\r\n    fetchExampleTasksSuccess: (state, { payload: tasks }) => {\r\n      state.tasks = tasks;\r\n      state.loading = false;\r\n    },\r\n    fetchExampleTasksError: (state) => {\r\n      state.loading = false;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  addTask,\r\n  toggleHideDone,\r\n  toggleTaskDone,\r\n  removeTask,\r\n  setAllDone,\r\n  fetchExampleTasks,\r\n  fetchExampleTasksSuccess,\r\n  fetchExampleTasksError,\r\n} = tasksSlice.actions;\r\n\r\nconst selectTasksState = (state) => state.tasks;\r\n\r\nexport const selectTasks = (state) => selectTasksState(state).tasks;\r\nexport const selectHideDone = (state) => selectTasksState(state).hideDone;\r\nexport const selectLoading = (state) => selectTasksState(state).loading;\r\nexport const selectAreTasksEmpty = (state) => selectTasks(state).length === 0;\r\nexport const selectIsEveryTaskDone = (state) =>\r\n  selectTasks(state).every(({ done }) => done);\r\n\r\nexport const getTaskById = (state, taskId) =>\r\n  selectTasks(state).find(({ id }) => id === taskId);\r\n\r\nexport const selectTasksByQuery = (state, query) => {\r\n  const tasks = selectTasks(state);\r\n  if (!query || query.trim() === \"\") {\r\n    return tasks;\r\n  }\r\n\r\n  return tasks.filter(({ content }) =>\r\n    content.toUpperCase().includes(query.trim().toUpperCase())\r\n  );\r\n};\r\n\r\nexport default tasksSlice.reducer;\r\n","import { nanoid } from \"@reduxjs/toolkit\";\r\nimport React, { useState, useRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Button, Input, StyledForm } from \"./styled\";\r\nimport { addTask } from \"../../tasksSlice\";\r\n\r\nconst Form = () => {\r\n  const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n  const inputRef = useRef(null);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    const trimmedNewTaskContent = newTaskContent.trim();\r\n\r\n    if (!trimmedNewTaskContent) {\r\n      return;\r\n    }\r\n\r\n    dispatch(\r\n      addTask({\r\n        content: trimmedNewTaskContent,\r\n        done: false,\r\n        id: nanoid(),\r\n      })\r\n    );\r\n\r\n    setNewTaskContent(\"\");\r\n    inputRef.current.focus();\r\n  };\r\n\r\n  return (\r\n    <StyledForm onSubmit={onFormSubmit}>\r\n      <Input\r\n        value={newTaskContent}\r\n        placeholder=\"Co jest do zrobienia?\"\r\n        onChange={({ target }) => setNewTaskContent(target.value)}\r\n        ref={inputRef}\r\n      />\r\n      <Button>Dodaj zadanie</Button>\r\n    </StyledForm>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import { NavLink } from \"react-router-dom\";\r\nimport styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n  list-style: none;\r\n  margin: 0;\r\n  padding: 0;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n  display: grid;\r\n  grid-template-columns: auto 1fr auto;\r\n  grid-gap: 10px;\r\n  align-items: center;\r\n  padding: 10px;\r\n  border-bottom: 1px solid ${({ theme }) => theme.color.alto};\r\n\r\n  ${({ hidden }) =>\r\n    hidden &&\r\n    css`\r\n      display: none;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n  ${({ done }) =>\r\n    done &&\r\n    css`\r\n      text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  border: none;\r\n  color: ${({ theme }) => theme.color.white};\r\n  width: 30px;\r\n  height: 30px;\r\n  padding: 0;\r\n  transition: filter 0.5s;\r\n  cursor: pointer;\r\n\r\n  ${({ toggleDone }) =>\r\n    toggleDone &&\r\n    css`\r\n      background: ${({ theme }) => theme.color.forestgreen};\r\n\r\n      &:hover {\r\n        filter: brightness(120%);\r\n      }\r\n\r\n      &:active {\r\n        filter: brightness(140%);\r\n      }\r\n    `}\r\n\r\n  ${({ remove }) =>\r\n    remove &&\r\n    css`\r\n      background: ${({ theme }) => theme.color.crimson};\r\n\r\n      &:hover {\r\n        filter: brightness(120%);\r\n      }\r\n\r\n      &:active {\r\n        filter: brightness(140%);\r\n      }\r\n    `}\r\n`;\r\n\r\nexport const StyledLink = styled(NavLink)`\r\n  color: teal;\r\n  text-decoration: none;\r\n\r\n  &:hover {\r\n    border-bottom: 2px solid;\r\n  }\r\n`;\r\n","export const toTasks = () => \"/zadania\";\r\nexport const toAuthor = () => \"/autor\";\r\n\r\nexport const toTask = ({ id } = { id: \":id\" }) => `/zadania/${id}`;\r\n","const searchQueryParamName = \"szukaj\";\r\n\r\nexport default searchQueryParamName;\r\n","import { List, Item, Content, Button, StyledLink } from \"./styled\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  selectTasksByQuery,\r\n  toggleTaskDone,\r\n  selectHideDone,\r\n  removeTask,\r\n} from \"../../tasksSlice\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { toTask } from \"../../../../routes\";\r\nimport searchQueryParamName from \"../../searchQueryParamName\";\r\n\r\nconst TaskList = () => {\r\n  const location = useLocation();\r\n  const query = new URLSearchParams(location.search).get(searchQueryParamName);\r\n\r\n  const tasks = useSelector((state) => selectTasksByQuery(state, query));\r\n  const hideDone = useSelector(selectHideDone);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <List>\r\n      {tasks.map((task) => (\r\n        <Item key={task.id} hidden={task.done && hideDone}>\r\n          <Button toggleDone onClick={() => dispatch(toggleTaskDone(task.id))}>\r\n            {task.done ? \"✔\" : \"\"}\r\n          </Button>\r\n          <Content done={task.done}>\r\n            <StyledLink to={toTask({ id: task.id })}>{task.content}</StyledLink>\r\n          </Content>\r\n          <Button remove onClick={() => dispatch(removeTask(task.id))}>\r\n            🗑\r\n          </Button>\r\n        </Item>\r\n      ))}\r\n    </List>\r\n  );\r\n};\r\n\r\nexport default TaskList;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  background: transparent;\r\n  color: ${({ theme }) => theme.color.teal};\r\n  border: none;\r\n  margin: 0 0 0 20px;\r\n  transition: color 0.5s;\r\n  cursor: pointer;\r\n\r\n  @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n    flex-basis: 100%;\r\n    margin: 10px;\r\n  }\r\n\r\n  &:hover {\r\n    filter: brightness(120%);\r\n  }\r\n\r\n  &:active {\r\n    filter: brightness(140%);\r\n  }\r\n\r\n  &:disabled {\r\n    color: ${({ theme }) => theme.color.silver};\r\n  }\r\n`;\r\n","import { Wrapper, Button } from \"./styled\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  selectAreTasksEmpty,\r\n  selectIsEveryTaskDone,\r\n  toggleHideDone,\r\n  setAllDone,\r\n  selectHideDone,\r\n} from \"../../tasksSlice\";\r\n\r\nconst Buttons = () => {\r\n  const areTasksEmpty = useSelector(selectAreTasksEmpty);\r\n  const isEveryTaskDone = useSelector(selectIsEveryTaskDone);\r\n  const hideDone = useSelector(selectHideDone);\r\n\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <Wrapper>\r\n      {!areTasksEmpty && (\r\n        <>\r\n          <Button onClick={() => dispatch(toggleHideDone())}>\r\n            {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n          </Button>\r\n          <Button\r\n            onClick={() => dispatch(setAllDone())}\r\n            disabled={isEveryTaskDone}\r\n          >\r\n            Ukończ wszystkie\r\n          </Button>\r\n        </>\r\n      )}\r\n    </Wrapper>\r\n  );\r\n};\r\nexport default Buttons;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.section`\r\n  margin: 10px 0;\r\n  background: ${({ theme }) => theme.color.white};\r\n  box-shadow: 0 0 5px ${({ theme }) => theme.color.alto};\r\n`;\r\n\r\nexport const Header = styled.header`\r\n  border-bottom: 1px solid ${({ theme }) => theme.color.alto};\r\n  display: grid;\r\n  grid-template-columns: auto auto;\r\n  grid-gap: 20px;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 20px;\r\n\r\n  @media (max-width: ${({ theme }) => theme.breakpoint.mobileMax}px) {\r\n    grid-template-columns: 1fr;\r\n  }\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n  font-size: 20px;\r\n  margin: 0;\r\n`;\r\n\r\nexport const Body = styled.div`\r\n  padding: 20px;\r\n`;\r\n","import { Wrapper, Header, Title, Body } from \"./styled\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n  <Wrapper>\r\n    <Header>\r\n      <Title>{title}</Title>\r\n      {extraHeaderContent}\r\n    </Header>\r\n    <Body>{body}</Body>\r\n  </Wrapper>\r\n);\r\n\r\nexport default Section;\r\n","const Header = ({ title }) => (\r\n    <header>\r\n        <h1>{title}</h1>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  max-width: 800px;\r\n  padding: 20px;\r\n  margin: 0 auto;\r\n`;\r\n","import { Wrapper } from \"./styled\";\r\n\r\nconst Container = ({ children }) => <Wrapper>{children}</Wrapper>;\r\n\r\nexport default Container;\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { fetchExampleTasks, selectLoading } from \"../../tasksSlice\";\r\nimport { Button, Wrapper } from \"../Buttons/styled\";\r\n\r\nconst ExampleTaskButton = () => {\r\n  const dispatch = useDispatch();\r\n  const loading = useSelector(selectLoading);\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Button disabled={loading} onClick={() => dispatch(fetchExampleTasks())}>\r\n        {loading ? \"Ładowanie...\" : \"Pobierz przykładowe zadania\"}\r\n      </Button>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default ExampleTaskButton;\r\n","import styled from \"styled-components\";\r\n\r\nexport default styled.input`\r\n  padding: 10px;\r\n  border: 2px solid #ccc;\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n`;\r\n","import Input from \"../../Input\";\r\nimport {\r\n  useQueryParameter,\r\n  useReplaceQueryParameter,\r\n} from \"../../queryParameters\";\r\nimport searchQueryParamName from \"../../searchQueryParamName\";\r\nimport { Wrapper } from \"./styled\";\r\n\r\nconst Search = () => {\r\n  const query = useQueryParameter(searchQueryParamName);\r\n  const replaceQueryParameter = useReplaceQueryParameter();\r\n\r\n  const onInputChange = ({ target }) => {\r\n    replaceQueryParameter({\r\n      key: searchQueryParamName,\r\n      value: target.value.trim() !== \"\" ? target.value : undefined,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Input\r\n        placeholder=\"Filtruj zadania\"\r\n        value={query || \"\"}\r\n        onChange={onInputChange}\r\n      />\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Search;","import { useHistory, useLocation } from \"react-router-dom\";\r\n\r\nexport const useQueryParameter = (key) => {\r\n  const location = useLocation();\r\n  const searchParams = new URLSearchParams(location.search);\r\n  return searchParams.get(key);\r\n};\r\n\r\nexport const useReplaceQueryParameter = () => {\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n\r\n  return ({ key, value }) => {\r\n    const searchParams = new URLSearchParams(location.search);\r\n\r\n    if (value === undefined) {\r\n      searchParams.delete(key);\r\n    } else {\r\n      searchParams.set(key, value);\r\n    }\r\n\r\n    const newSearch = searchParams.toString();\r\n    history.push(`${location.pathname}?${newSearch}`);\r\n  };\r\n};\r\n","import Form from \"./Form\";\r\nimport TasksList from \"./TasksList\";\r\nimport Buttons from \"./Buttons\";\r\nimport Section from \"../../../common/Section\";\r\nimport Header from \"../../../common/Header\";\r\nimport Container from \"../../../common/Container\";\r\nimport ExampleTaskButton from \"./FetchExampleTasksButton\";\r\nimport Search from \"./Search\";\r\n\r\nexport function TasksPage() {\r\n  return (\r\n    <Container>\r\n      <Header title=\"Lista Zadań\" />\r\n      <Section\r\n        title=\"Dodaj nowe Zadanie\"\r\n        body={<Form />}\r\n        extraHeaderContent={<ExampleTaskButton />}\r\n      />\r\n      <Section title=\"Wyszukiwarka\" body={<Search />} />\r\n      <Section\r\n        title=\"Lista zadań\"\r\n        body={<TasksList />}\r\n        extraHeaderContent={<Buttons />}\r\n      />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default TasksPage;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  padding: 20px;\r\n`;\r\n","import Section from \"../../../common/Section\";\r\nimport Header from \"../../../common/Header\";\r\nimport Container from \"../../../common/Container\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getTaskById } from \"../tasksSlice\";\r\nimport { Wrapper } from \"./styled\";\r\n\r\nexport function TaskPage() {\r\n  const { id } = useParams();\r\n  const task = useSelector((state) => getTaskById(state, id));\r\n\r\n  return (\r\n    <Container>\r\n      <Header title=\"Szczegóły zadania\" />\r\n      <Section\r\n        title={task ? task.content : \"Nie znaleziono zadania 😒\"}\r\n        body={\r\n          !!task && (\r\n            <Wrapper>\r\n              <strong>Ukończono:</strong> {task.done ? \"TAK\" : \"NIE\"}\r\n            </Wrapper>\r\n          )\r\n        }\r\n      />\r\n    </Container>\r\n  );\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nexport const Article = styled.article`\r\n  padding: 30px;\r\n  font-size: 100%;\r\n  line-height: 1.15;\r\n  letter-spacing: 0.3px;\r\n`;\r\n","import Section from \"../../common/Section/\";\r\nimport Header from \"../../common/Header\";\r\nimport Container from \"../../common/Container\";\r\nimport { Article } from \"./styled\";\r\n\r\nexport const Author = () => {\r\n  return (\r\n    <Container>\r\n      <Header title=\"O Autorze\" />\r\n      <Section\r\n        title=\"Piotr Kubiak\"\r\n        body={\r\n          <>\r\n            <Article>\r\n              <p>\r\n                Nazywam się Piotr Kubiak, mam 34lata i pracuje jako operator CNC\r\n                (dla ludzi niewiedzących co to CNC - programuje i pracuje na\r\n                frezarkach sterowanych numerycznie).\r\n              </p>\r\n              <p>\r\n                Mieszkam w Kaletach, małym miasteczku w woj. śląskim zewsząd\r\n                otoczonym lasem.\r\n              </p>\r\n              <p>\r\n                Lubię słuchać muzyki w każdym wolnym czasie, głównie jest to\r\n                muzyka taneczna: dance, techno, trance i \"mocne\" jej odmiany:\r\n                hardstyle, hardtrance itp\r\n              </p>\r\n              <p>\r\n                Uwielbiam nowinki motoryzacyjne, głównie niemiecką motoryzacje\r\n                ale o innych też chętnie czytam.\r\n              </p>\r\n              <p>Lubię dobry film kryminalny, SF, akcje czy komedie.</p>\r\n              <p>\r\n                W wolnych chwilach naprawiam komputery, kolumny hifi itp.\r\n                urządzenia. Komputery to moja pasja. Już od dziecka kiedy tata\r\n                przyniósł mi pierwszy komputer z windowsem 3.11 i\r\n                monochromatycznym monitorem, rozpoczęła się moja przygoda z\r\n                kompami. Poskładałem w swoim życiu sporo klocków dla siebie\r\n                chyba z 7, nie licząc już ile dla znajomych.... Zawsze chciałem\r\n                robić coś więcej niż tylko składać i naprawiać komputery,\r\n                dlatego przyszedł czas na naukę frontend`u 😉 Jak to mówią\r\n                lepiej późno niż za późno 😊\r\n              </p>\r\n              <p>💿 W weekendy gram jako Dj na imprezach 🔉</p>\r\n            </Article>\r\n          </>\r\n        }\r\n      />\r\n    </Container>\r\n  );\r\n};\r\n","import styled from \"styled-components\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst activeClassName = \"link-active\";\r\n\r\nexport const StyledNavLink = styled(NavLink).attrs(() => ({\r\n  activeClassName,\r\n}))`\r\n  color: ${({ theme }) => theme.color.white};\r\n  text-decoration: none;\r\n\r\n  &.${activeClassName} {\r\n    font-weight: bold;\r\n  }\r\n\r\n  &:hover {\r\n    border-bottom: 2px solid;\r\n  }\r\n`;\r\n\r\nexport const List = styled.ul`\r\n  background: ${({ theme }) => theme.color.teal};\r\n  margin: 0;\r\n  padding: 0;\r\n  display: flex;\r\n  justify-content: center;\r\n  list-style: none;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n  margin: 20px;\r\n`;\r\n","import { toAuthor, toTasks } from \"../routes\";\r\nimport { List, Item, StyledNavLink } from \"./styled\";\r\n\r\nconst Navigation = () => {\r\n  return (\r\n    <nav>\r\n      <List>\r\n        <Item>\r\n          <StyledNavLink to={toTasks()}>Zadania</StyledNavLink>\r\n        </Item>\r\n        <Item>\r\n          <StyledNavLink to={toAuthor()}>O autorze</StyledNavLink>\r\n        </Item>\r\n      </List>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navigation;\r\n","import { TasksPage } from \"./features/tasks/TasksPage/\";\r\nimport { TaskPage } from \"./features/tasks/TaskPage\";\r\nimport { Author } from \"./features/author/Author\";\r\nimport { HashRouter, Switch, Route, Redirect } from \"react-router-dom\";\r\nimport { toAuthor, toTask, toTasks } from \"./routes\";\r\nimport Navigation from \"./Navigation\";\r\n\r\nconst App = () => (\r\n  <HashRouter>\r\n    <Navigation />\r\n\r\n    <Switch>\r\n      <Route path={toTask()}>\r\n        <TaskPage />\r\n      </Route>\r\n      <Route path={toTasks()}>\r\n        <TasksPage />\r\n      </Route>\r\n      <Route path={toAuthor()}>\r\n        <Author />\r\n      </Route>\r\n      <Route>\r\n        <Redirect to={toTasks()} />\r\n      </Route>\r\n    </Switch>\r\n  </HashRouter>\r\n);\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    *, ::after, ::before {\r\n        box-sizing: inherit;\r\n    }\r\n\r\n    body {\r\n        background-color: ${({ theme }) => theme.color.gallery};\r\n        font-family: 'Montserrat', sans-serif;\r\n    }\r\n    `;\r\n","export const getExampleTasks = async () => {\r\n  const response = await fetch(\"/todo-list-react/exampleTasks.json\");\r\n\r\n  if (!response.ok) {\r\n    new Error(response.statusText);\r\n  }\r\n\r\n  return await response.json();\r\n};\r\n","import {\r\n  takeLatest,\r\n  call,\r\n  put,\r\n  delay,\r\n  select,\r\n  takeEvery,\r\n} from \"redux-saga/effects\";\r\nimport { saveTasksInLocalStorage } from \"./tasksLocalStorage\";\r\nimport {\r\n  fetchExampleTasks,\r\n  selectTasks,\r\n  fetchExampleTasksSuccess,\r\n  fetchExampleTasksError,\r\n} from \"./tasksSlice\";\r\nimport { getExampleTasks } from \"./getExampleTasks\";\r\n\r\nfunction* fetchExampleTasksHandler() {\r\n  try {\r\n    yield delay(1000);\r\n    const exampleTasks = yield call(getExampleTasks);\r\n    yield put(fetchExampleTasksSuccess(exampleTasks));\r\n  } catch (error) {\r\n    yield put(fetchExampleTasksError());\r\n    yield call(alert, \"Upsss coś poszło nie tak!\");\r\n  }\r\n}\r\n\r\nfunction* saveTasksInLocalStorageHandler() {\r\n  const tasks = yield select(selectTasks);\r\n  yield call(saveTasksInLocalStorage, tasks);\r\n}\r\n\r\nexport function* tasksSaga() {\r\n  yield takeLatest(fetchExampleTasks.type, fetchExampleTasksHandler);\r\n  yield takeEvery(\"*\", saveTasksInLocalStorageHandler);\r\n}\r\n","import { all } from \"@redux-saga/core/effects\";\r\nimport { tasksSaga } from \"./features/tasks/tasksSaga\";\r\n\r\nexport default function* rootSaga() {\r\n  yield all([tasksSaga()]);\r\n}\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport tasksReducer from \"./features/tasks/tasksSlice\";\r\nimport createSagaMiddleware from \"@redux-saga/core\";\r\nimport rootSaga from \"./rootSaga\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    tasks: tasksReducer,\r\n  },\r\n  middleware: [sagaMiddleware],\r\n});\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ThemeProvider } from \"styled-components\";\nimport { Provider } from \"react-redux\";\nimport { GlobalStyle } from \"./GlobalStyle\";\nimport { theme } from \"./theme\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const theme = {\r\n  color: {\r\n    white: \"#FFFFFF\",\r\n    black: \"#000000\",\r\n    silver: \"#C0C0C0\",\r\n    teal: \"#008080\",\r\n    alto: \"#DBDBDB\",\r\n    crimson: \"#DC143C\",\r\n    forestgreen: \"#228B22\",\r\n    gallery: \"#EFEFEF\",\r\n  },\r\n  breakpoint: {\r\n    mobileMax: 767,\r\n  },\r\n};\r\n"],"sourceRoot":""}